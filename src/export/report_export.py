"""
Report export utilities - PDF and Excel generation
"""
import logging
import re
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime

import pandas as pd
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_JUSTIFY

logger = logging.getLogger(__name__)


def convert_md_to_pdf(md_path: str, pdf_path: Optional[str] = None) -> str:
    """
    Convert markdown report to PDF format

    Args:
        md_path: Path to markdown file
        pdf_path: Output PDF path (optional, defaults to same name with .pdf extension)

    Returns:
        Path to generated PDF file
    """
    md_path = Path(md_path)
    if pdf_path is None:
        pdf_path = md_path.with_suffix('.pdf')
    else:
        pdf_path = Path(pdf_path)

    # Read markdown content
    with open(md_path, 'r', encoding='utf-8') as f:
        md_content = f.read()

    # Create PDF
    doc = SimpleDocTemplate(
        str(pdf_path),
        pagesize=letter,
        rightMargin=0.75*inch,
        leftMargin=0.75*inch,
        topMargin=0.75*inch,
        bottomMargin=0.75*inch
    )

    # Prepare styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        textColor=colors.HexColor('#1a1a1a'),
        spaceAfter=12,
        alignment=TA_CENTER
    )
    heading1_style = ParagraphStyle(
        'CustomHeading1',
        parent=styles['Heading1'],
        fontSize=14,
        textColor=colors.HexColor('#2c3e50'),
        spaceAfter=10,
        spaceBefore=12
    )
    heading2_style = ParagraphStyle(
        'CustomHeading2',
        parent=styles['Heading2'],
        fontSize=12,
        textColor=colors.HexColor('#34495e'),
        spaceAfter=8,
        spaceBefore=10
    )
    body_style = ParagraphStyle(
        'CustomBody',
        parent=styles['BodyText'],
        fontSize=10,
        alignment=TA_JUSTIFY,
        spaceAfter=6
    )

    # Build PDF content
    story = []
    lines = md_content.split('\n')

    for line in lines:
        line = line.strip()

        if not line:
            story.append(Spacer(1, 0.1*inch))
            continue

        # Title (# )
        if line.startswith('# '):
            text = line[2:].strip()
            story.append(Paragraph(text, title_style))
            story.append(Spacer(1, 0.15*inch))

        # Heading 1 (## )
        elif line.startswith('## '):
            text = line[3:].strip()
            story.append(Paragraph(text, heading1_style))

        # Heading 2 (### )
        elif line.startswith('### '):
            text = line[4:].strip()
            story.append(Paragraph(text, heading2_style))

        # Lists
        elif line.startswith('- ') or line.startswith('* '):
            text = 'â€¢ ' + line[2:].strip()
            story.append(Paragraph(text, body_style))

        # Numbered lists
        elif re.match(r'^\d+\.\s', line):
            story.append(Paragraph(line, body_style))

        # Regular paragraphs
        else:
            # Escape XML special characters first
            text = line.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')

            # Simple markdown formatting (safer approach)
            # Bold: **text** -> <b>text</b>
            text = re.sub(r'\*\*([^*]+?)\*\*', r'<b>\1</b>', text)
            # Italic: *text* -> <i>text</i> (only single asterisks, not part of **)
            text = re.sub(r'(?<!\*)\*([^*]+?)\*(?!\*)', r'<i>\1</i>', text)

            # Try to add paragraph, skip if it fails
            try:
                story.append(Paragraph(text, body_style))
            except Exception as e:
                # If formatting fails, just add plain text without formatting
                plain_text = re.sub(r'<[^>]+>', '', text)  # Strip any tags
                try:
                    story.append(Paragraph(plain_text, body_style))
                except:
                    # If still fails, skip this line
                    logger.debug(f"Skipping problematic line: {line[:50]}...")

    # Add footer with generation date
    story.append(PageBreak())
    footer_text = f"<i>Generated by ERT on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
    story.append(Paragraph(footer_text, styles['Normal']))

    # Build PDF
    doc.build(story)
    logger.info(f"PDF generated: {pdf_path}")

    return str(pdf_path)


def export_financial_model_to_excel(
    company_dataset: Any,
    ticker: str,
    excel_path: Optional[str] = None
) -> str:
    """
    Export financial model and data to Excel workbook

    Args:
        company_dataset: CompanyDataset object with all financial data
        ticker: Stock ticker symbol
        excel_path: Output Excel path (optional)

    Returns:
        Path to generated Excel file
    """
    if excel_path is None:
        reports_dir = Path(__file__).parent.parent.parent / 'reports'
        excel_path = reports_dir / f"{ticker}_{int(datetime.now().timestamp())}_financial_model.xlsx"
    else:
        excel_path = Path(excel_path)

    excel_path.parent.mkdir(parents=True, exist_ok=True)

    # Create Excel writer
    writer = pd.ExcelWriter(excel_path, engine='xlsxwriter')
    workbook = writer.book

    # Formats
    header_format = workbook.add_format({
        'bold': True,
        'bg_color': '#4472C4',
        'font_color': 'white',
        'border': 1
    })
    number_format = workbook.add_format({'num_format': '#,##0'})
    currency_format = workbook.add_format({'num_format': '$#,##0'})
    percent_format = workbook.add_format({'num_format': '0.00%'})

    # Sheet 1: Company Overview
    overview_data = {
        'Metric': [],
        'Value': []
    }

    snapshot = company_dataset.snapshot
    overview_data['Metric'].extend(['Company Name', 'Ticker', 'Sector', 'Industry', 'Market Cap', 'Current Price'])
    overview_data['Value'].extend([
        snapshot.name,
        snapshot.ticker,
        snapshot.sector,
        snapshot.industry,
        snapshot.market_cap if snapshot.market_cap else 'N/A',
        snapshot.current_price if snapshot.current_price else 'N/A'
    ])

    df_overview = pd.DataFrame(overview_data)
    df_overview.to_excel(writer, sheet_name='Company Overview', index=False)
    worksheet = writer.sheets['Company Overview']
    worksheet.set_column('A:A', 25)
    worksheet.set_column('B:B', 30)

    # Sheet 2: Fundamentals
    fundamentals = company_dataset.financials.fundamentals or {}
    if fundamentals:
        fund_data = {
            'Metric': list(fundamentals.keys()),
            'Value': list(fundamentals.values())
        }
        df_fund = pd.DataFrame(fund_data)
        df_fund.to_excel(writer, sheet_name='Fundamentals', index=False)
        worksheet = writer.sheets['Fundamentals']
        worksheet.set_column('A:A', 30)
        worksheet.set_column('B:B', 20, number_format)

    # Sheet 3: Financial Ratios
    ratios = company_dataset.financials.ratios or {}
    if ratios:
        ratio_data = {
            'Ratio': list(ratios.keys()),
            'Value': list(ratios.values())
        }
        df_ratios = pd.DataFrame(ratio_data)
        df_ratios.to_excel(writer, sheet_name='Financial Ratios', index=False)
        worksheet = writer.sheets['Financial Ratios']
        worksheet.set_column('A:A', 25)
        worksheet.set_column('B:B', 15, percent_format)

    # Sheet 4: Price History
    price_history = company_dataset.financials.price_history
    if price_history is not None and not price_history.empty:
        if isinstance(price_history, dict):
            df_price = pd.DataFrame(price_history)
        else:
            df_price = price_history

        df_price.to_excel(writer, sheet_name='Price History', index=True)
        worksheet = writer.sheets['Price History']
        worksheet.set_column('A:A', 15)
        worksheet.set_column('B:F', 12, currency_format)

    # Sheet 5: Peer Comparison
    supplemental = company_dataset.supplemental or {}
    peer_metrics = supplemental.get('peer_metrics', [])
    if peer_metrics:
        df_peers = pd.DataFrame(peer_metrics)
        df_peers.to_excel(writer, sheet_name='Peer Comparison', index=False)
        worksheet = writer.sheets['Peer Comparison']
        worksheet.set_column('A:A', 15)
        worksheet.set_column('B:H', 18, number_format)

    # Sheet 6: DCF Model (if available)
    deterministic = supplemental.get('deterministic', {})
    if deterministic:
        dcf_data = deterministic.get('dcf_valuation', {})
        if dcf_data:
            df_dcf = pd.DataFrame([dcf_data])
            df_dcf.to_excel(writer, sheet_name='DCF Model', index=False)
            worksheet = writer.sheets['DCF Model']
            worksheet.set_column('A:Z', 20, currency_format)

    # Sheet 7: Three Statement Model
    three_statement = supplemental.get('three_statement_model', {})
    if three_statement:
        # Income Statement
        income_stmt = three_statement.get('income_statement', [])
        if income_stmt:
            df_income = pd.DataFrame(income_stmt)
            df_income.to_excel(writer, sheet_name='Income Statement', index=False)
            worksheet = writer.sheets['Income Statement']
            worksheet.set_column('A:A', 25)
            worksheet.set_column('B:Z', 15, currency_format)

        # Balance Sheet
        balance_sheet = three_statement.get('balance_sheet', [])
        if balance_sheet:
            df_balance = pd.DataFrame(balance_sheet)
            df_balance.to_excel(writer, sheet_name='Balance Sheet', index=False)
            worksheet = writer.sheets['Balance Sheet']
            worksheet.set_column('A:A', 25)
            worksheet.set_column('B:Z', 15, currency_format)

        # Cash Flow
        cash_flow = three_statement.get('cash_flow', [])
        if cash_flow:
            df_cf = pd.DataFrame(cash_flow)
            df_cf.to_excel(writer, sheet_name='Cash Flow', index=False)
            worksheet = writer.sheets['Cash Flow']
            worksheet.set_column('A:A', 25)
            worksheet.set_column('B:Z', 15, currency_format)

    # Close writer
    writer.close()
    logger.info(f"Excel financial model generated: {excel_path}")

    return str(excel_path)
